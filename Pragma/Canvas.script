go.property("x_scale", 1)
go.property("y_scale", 1)
go.property("x_delta", 0)
go.property("y_delta", 0)
go.property("euler_z", 0)
go.property("update_camera", true)
go.property("display_losts", false)   -- On non-demo versions, this will be determined by Save.Wish
go.property("options", false)   -- On non-demo versions, this will be determined by CurrentTrackId


-- Context Info
-- Exposed: ContextTime, WishSprites
local Before
local WGOs, HGOs, EGOs, AlGOs, ArGOs
local WishTints, HintTints, EchoTints, AnimTints
local HintSprites, EchoSprites, AlSprites, ArSprites

local ButtonPressed, ButtonInsertIndex = false, 0
local LastContextTime, LastWgoUsed, LastHgoUsed, LastEgoUsed, LastAgoUsed = 0, 0, 0, 0, 0
local LastHit, LastNonHit, LastStr = 0, 0, ""
-- TotalJud, Early, Late, Hit


-- Caches & Constants
-- Only functions used in update() & on_message() should be cached here;
--      functions used in the for loop of init() & final() should be cached internally.
local hash = hash
local go_set = go.set
local msg_url = msg.url
local msg_post = msg.post
local string_format = string.format
local socket_gettime = socket.gettime
local label_set_text = label.set_text

local GetTime = AcAudio.GetTime
local PlayUnit = AcAudio.PlayUnit
local CheckPlaying = AcAudio.CheckPlaying
local UpdateArf = Arf3.UpdateArf
local SetCam = Arf3.SetCam

local FMT_SCORE, FMT_SCORE_DL = "◇  %d", "◇  %d · %d"
local FMT_WO, FMT_WO_DL = "◇  World Obtained · %d", "◇  World Obtained · %d · %d"
local FMT_PO = "◇  Perfection Obtained · %d"

local TINT, TINTW, COLOR = hash("tint"), hash("tint.w"), hash("color")
local SHOW_SCORE, HIDE_SCORE = hash("ar_show_score"), hash("ar_hide_score")
local SHOW_OPTIONS, HIDE_OPTIONS, PROCESS_GUI = hash("ar_show_options"), hash("ar_hide_options"), hash("ar_process_gui")
local AR_INIT, AR_UPDATE, AR_FINAL = hash("ar_init"), hash("ar_update"), hash("ar_final")
local ENABLE, DISABLE = hash("enable"), hash("disable")

local TEXT_RED = vmath.vector4(1, 0.62890625, 0.62890625, 0.937)
local TEXT_WHITE = vmath.vector4(1, 1, 1, 0.937)

local Ar, Sprite = hash("Ar"), hash("Sprite")
local Label, ButtonLabel = msg_url("Ar", "/Texts", "NorthWest"), msg_url("Ar", "/Texts", "SouthEast")
local Wfac = msg_url("Ar", "/Pragma", "1 Wish")
local Hfac = msg_url("Ar", "/Pragma", "1 Hint")
local Efac = msg_url("Ar", "/Pragma", "1 Echo")
local Afac = msg_url("Ar", "/Pragma", "1 Anim")


-- Init & Update Functions
--
function init(self)
	local track_id_str = tostring(CurrentTrackId)

	-- Load Arf
	--
	local wgo_required, hgo_required, ego_required, ago_required = 0, 0, 0, 0
		  Before, TotalJud, wgo_required, hgo_required, ego_required = Arf3.InitArf3(CurrentFumenBuf, false)
		  ago_required = hgo_required + ego_required
		  CurrentFumenBuf = nil

	-- Load Context
	--
	local nt = AcUtil.NewTable
	local vmath_vector4 = vmath.vector4
	local factory_create = factory.create
	local sprite_play_flipbook = sprite.play_flipbook
	do
		-- Create Tables
		--
		WGOs, HGOs, EGOs, AlGOs, ArGOs = nt(wgo_required, 0), nt(hgo_required, 0), nt(ego_required, 0), nt(ago_required, 0), nt(ago_required, 0)
		WishSprites, HintSprites, EchoSprites, AlSprites, ArSprites = nt(wgo_required, 0), nt(hgo_required, 0), nt(ego_required, 0), nt(ago_required, 0), nt(ago_required, 0)
		WishTints, HintTints, EchoTints, AnimTints = nt(wgo_required, 0), nt(hgo_required, 0), nt(ego_required, 0), nt(ago_required, 0)

		-- Fill Tables
		--
		for i = 1, wgo_required do
			local W = factory_create(Wfac)
			local WS = msg_url(Ar, W, Sprite)
			sprite_play_flipbook(WS, track_id_str)
			WGOs[i], WishSprites[i] = W, WS
			msg_post(W, DISABLE)
		end

		for i = 1, hgo_required do
			local H = factory_create(Hfac)
			HGOs[i], HintSprites[i], HintTints[i] = H, msg_url(Ar, H, Sprite), vmath_vector4(0,0,0,1)
			msg_post(H, DISABLE)
		end

		for i = 1, ego_required do
			local E = factory_create(Efac)
			EGOs[i], EchoSprites[i], EchoTints[i] = E, msg_url(Ar, E, Sprite), vmath_vector4()
			msg_post(E, DISABLE)
		end

		for i = 1, ago_required do
			local AL, AR = factory_create(Afac), factory_create(Afac)
			AlGOs[i], ArGOs[i], AlSprites[i], ArSprites[i], AnimTints[i] = AL, AR, msg_url(Ar, AL, Sprite), msg_url(Ar, AR, Sprite), vmath_vector4()
			msg_post(AL, DISABLE)	msg_post(AR, DISABLE)
		end
	end

	-- Load Externals
	--
	if self.options then   -- Pass the Canvas URL to the new UI Node as a script property here
		self.options = factory_create("Ar:/Pragma#1 Options", nil, nil, {current_canvas = msg_url("#")})
	else
		label_set_text(ButtonLabel, "Exit「×」")
		ButtonInsertIndex = AppendNode()
	end

	self.show_score = true
	if CurrentFumenScript then
		msg_post(CurrentFumenScript, AR_INIT)
	end
end

function update(self, dt)

	-- Update ContextTime
	--
	if ContextTime then
		ContextTime = ContextTime + dt*1000
	else
		local AudioTime = GetTime(CurrentAudioUnit)
		if WindowActive and AudioTime and AudioTime > 0 then
			if not CheckPlaying(CurrentAudioUnit) then PlayUnit(CurrentAudioUnit, false) end
			ContextTime = AudioTime - AudioLatency
		else
			return
		end
	end

	-- Update Context
	--
	if ContextTime < Before then
		if self.update_camera then SetCam(self.x_scale, self.y_scale, self.x_delta, self.y_delta, self.euler_z) end
		local hit, lost, wgo_used, hgo_used, ego_used, ago_used = UpdateArf(ContextTime, WGOs, HGOs, EGOs, AlGOs, ArGOs, WishTints, HintTints, EchoTints, AnimTints)

		-- Mutate Tints
		--
		local WishSprites = WishSprites
		for i = 1, wgo_used do	go_set(WishSprites[i], TINTW, WishTints[i])	end
		for i = 1, hgo_used do	go_set(HintSprites[i], TINT, HintTints[i])	end
		for i = 1, ego_used do	go_set(EchoSprites[i], TINT, EchoTints[i])	end
		for i = 1, ago_used do
			go_set(AlSprites[i], TINT, AnimTints[i])
			go_set(ArSprites[i], TINT, AnimTints[i])
		end

		-- Enable & Disable Components
		--
		if wgo_used > LastWgoUsed then
			for i = LastWgoUsed+1, wgo_used do
				msg_post(WishSprites[i], ENABLE)
			end
		elseif wgo_used < LastWgoUsed then
			for i = wgo_used+1, LastWgoUsed do
				msg_post(WishSprites[i], DISABLE)
			end
		end

		if hgo_used > LastHgoUsed then
			for i = LastHgoUsed+1, hgo_used do
				msg_post(HGOs[i], ENABLE)
			end
		elseif hgo_used < LastHgoUsed then
			for i = hgo_used+1, LastHgoUsed do
				msg_post(HGOs[i], DISABLE)
			end
		end

		if ego_used > LastEgoUsed then
			for i = LastEgoUsed+1, ego_used do
				msg_post(EGOs[i], ENABLE)
			end
		elseif ego_used < LastEgoUsed then
			for i = ego_used+1, LastEgoUsed do
				msg_post(EGOs[i], DISABLE)
			end
		end

		if ago_used > LastAgoUsed then
			for i = LastAgoUsed+1, ago_used do
				msg_post(AlSprites[i], ENABLE)
				msg_post(ArSprites[i], ENABLE)
			end
		elseif ago_used < LastAgoUsed then
			for i = ago_used+1, LastAgoUsed do
				msg_post(AlSprites[i], DISABLE)
				msg_post(ArSprites[i], DISABLE)
			end
		end

		-- Update Externals & Score
		--
		Hit, Late = Hit+hit, Late+lost
		LastWgoUsed, LastHgoUsed, LastEgoUsed, LastAgoUsed = wgo_used, hgo_used, ego_used, ago_used

		if CurrentFumenScript then
			msg_post(CurrentFumenScript, AR_UPDATE)
		end

		if self.show_score then
			local percent = Hit / TotalJud
			local current_nonhit = Early + Late
			if Hit ~= LastHit or current_nonhit ~= LastNonHit then
				if self.display_losts then
					if percent < 0.963 then
						LastStr = string_format(FMT_SCORE_DL, Hit, current_nonhit)
						label_set_text(Label, LastStr)
					elseif percent < 1 then
						LastStr = string_format(FMT_WO_DL, Hit, current_nonhit)
						label_set_text(Label, LastStr)
					else
						LastStr = string_format(FMT_PO, Hit)
						label_set_text(Label, LastStr)
					end
				else
					if percent < 0.963 then
						LastStr = string_format(FMT_SCORE, Hit)
						label_set_text(Label, LastStr)
					elseif percent < 1 then
						LastStr = string_format(FMT_WO, Hit)
						label_set_text(Label, LastStr)
					else
						LastStr = string_format(FMT_PO, Hit)
						label_set_text(Label, LastStr)
					end
				end
					LastHit, LastNonHit = Hit, current_nonhit
			end
		end
			LastContextTime = ContextTime
	else
		go.delete()   -- Won't be cached
	end
end


-- Message Handling Functions
--
local message_callbacks = {
	[SHOW_OPTIONS] = function(self)
		if self.options then
			go.cancel_animations("#", "x_delta")
			go.animate("#", "x_delta", go.PLAYBACK_ONCE_FORWARD, -337.5, go.EASING_OUTCUBIC, 0.37)
		end
	end,

	[HIDE_OPTIONS] = function(self)
		if self.options then
			go.cancel_animations("#", "x_delta")
			go.animate("#", "x_delta", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_OUTCUBIC, 0.37)
		end
	end,

	[PROCESS_GUI] = function()   -- Button Size: 108*36
		if CurrentGuiPhase == 2 then   -- OnScreen
			if not ButtonPressed then return end
			if CurrentGuiX >= 1655 and CurrentGuiX <= 1800 and CurrentGuiY >= 0 and CurrentGuiY <= 73 then
				local t = socket_gettime()
				if t - ButtonPressed > 1.237 then
					GuiDoFeedback(false)
					go.delete()
				end
			else   -- Out of Range -> Released
				go_set(ButtonLabel, COLOR, TEXT_WHITE)
				label_set_text(ButtonLabel, "Exit「×」")
				ButtonPressed = false
				GuiDoFeedback(false)
			end
		elseif CurrentGuiPhase == 1 then   -- Pressed
			if CurrentGuiX >= 1655 and CurrentGuiX <= 1800 and CurrentGuiY >= 0 and CurrentGuiY <= 73 then
				go_set(ButtonLabel, COLOR, TEXT_RED)
				label_set_text(ButtonLabel, "Hold to Exit「×」")
				ButtonPressed = socket_gettime()
				GuiDoFeedback(true)
			end
		elseif ButtonPressed then   -- Released
			go_set(ButtonLabel, COLOR, TEXT_WHITE)
			label_set_text(ButtonLabel, "Exit「×」")
			ButtonPressed = false
			GuiDoFeedback(false)
		end
	end,

	[SHOW_SCORE] = function(self)
		self.show_score = true
		local percent, current_nonhit = (Hit / TotalJud), (Early + Late)

		if Hit ~= LastHit or current_nonhit ~= LastNonHit then
			LastHit, LastNonHit = Hit, current_nonhit
			if self.display_losts then
				if percent < 0.963 then
					LastStr = string_format(FMT_SCORE_DL, Hit, current_nonhit)
					label_set_text(Label, LastStr)
				elseif percent < 1 then
					LastStr = string_format(FMT_WO_DL, Hit, current_nonhit)
					label_set_text(Label, LastStr)
				else
					LastStr = string_format(FMT_PO, Hit)
					label_set_text(Label, LastStr)
				end
			else
				if percent < 0.963 then
					LastStr = string_format(FMT_SCORE, Hit)
					label_set_text(Label, LastStr)
				elseif percent < 1 then
					LastStr = string_format(FMT_WO, Hit)
					label_set_text(Label, LastStr)
				else
					LastStr = string_format(FMT_PO, Hit)
					label_set_text(Label, LastStr)
				end
			end
		else
			label_set_text(Label, LastStr)
		end
	end,

	[HIDE_SCORE] = function(self)
		self.show_score = false
	end
}

function on_message(self, message_id)
	if message_callbacks[message_id] then
		message_callbacks[message_id](self)
	end
end


-- Clear Function
--
function final(self)

	-- Score Clean-up
	--
	Arf3.FinalArf()
	Late = TotalJud - Hit - Early
	message_callbacks[SHOW_SCORE](self)

	-- External Clean-up
	--
	if CurrentFumenScript then 				msg_post(CurrentFumenScript, AR_FINAL)  end
	if self.options then					msg_post(self.options, AR_FINAL)
	else
		label_set_text(ButtonLabel, "")
		go_set(ButtonLabel, COLOR, TEXT_WHITE)
		RemoveNode(ButtonInsertIndex)
	end

	-- Release GOs
	--
	local go_delete = go.delete
	for i = 1, #WGOs do		go_delete(WGOs[i])							end
	for i = 1, #HGOs do		go_delete(HGOs[i])							end
	for i = 1, #EGOs do		go_delete(EGOs[i])							end
	for i = 1, #AlGOs do	go_delete(AlGOs[i])	go_delete(ArGOs[i])		end

	-- Param Clean-up
	-- No need to manually nullify Tables.
	--
	Before, ContextTime = 0, nil
	TotalJud, Hit, Early, Late = 0, 0, 0, 0

	ButtonPressed, ButtonInsertIndex = false, 0
	LastContextTime, LastWgoUsed, LastHgoUsed, LastAgoUsed, LastEgoUsed = 0, 0, 0, 0, 0
	LastHit, LastNonHit, LastStr = 0, 0, ""
end