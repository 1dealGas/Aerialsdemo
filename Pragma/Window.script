-- Caches & Local Variables
--
local AR_SHJ = AR_SHJ
local TOUCH, TOUCH_MULTI = hash("touch"), hash("touch_multi")
local PG = PROCESS_GUI

local v3 = vmath.vector3
local JudgeArf = Arf3.JudgeArf
local DoHapticFeedback = AcUtil.DoHapticFeedback
local PlayUnit, StopUnit = AcAudio.PlayUnit, AcAudio.StopUnit
local socket_gettime, msg_post = socket.gettime, msg.post

local CenterX, CenterY, PosDnm = 0, 0, 0
local TouchTable, GuiTable = { v3(), v3(), v3(), v3(), v3(), v3(), v3(), v3(), v3(), v3() }, {}
local HitSoundUnits, HsWhich, LastHapticTime = {}, 1, 0


-- Platform-Independent Functions
--
function init()
	-- Add Window Resizing Listener
	--
	window.set_listener(
		function(self, event, data)
			if event == 0 then
				WindowActive = false
				if CurrentAudioUnit then
					ContextTime = nil
					AcAudio.StopUnit(CurrentAudioUnit, false)
				end
			elseif event == 1 then
				WindowActive = true
			elseif event == 2 then
				CenterX, CenterY = data.width / 2, data.height / 2
				local wr, hr = CenterX / 900, CenterY / 540
				if wr > hr then
					LayoutModeLandscape = true
					PosDnm = 1 / hr
				else
					LayoutModeLandscape = true
					PosDnm = 1 / wr
				end
			end
		end
	)

	-- Initial Window Size Adapting
	--
	local W, H = window.get_size()
	CenterX, CenterY = W / 2, H / 2
	local wr, hr = W / 1800, H / 1080
	if wr > hr then
		LayoutModeLandscape = true
		PosDnm = 1 / hr
	else
		LayoutModeLandscape = true
		PosDnm = 1 / wr
	end

	-- Prepare HitSounds
	--
	local _, hitsoundres = AcAudio.CreateSource("/Reference/maou_se_system14.wav")
	for i = 1, 6 do
		HitSoundUnits[i] = AcAudio.CreateUnit(hitsoundres)
	end

	-- Prepare Input Pipeline
	--
	if AcInput then
		for  i = 11, 32  do  TouchTable[i] = v3()  end
		AcInput.Activate()
	else
		msg_post("#", "acquire_input_focus")
	end
end

function on_message(self, message_id, info)
	if message_id == PG then
		for i = info.nodeProgress-1, 1, -1 do
			if Nodes[i] then
				info.nodeProgress = i
				msg_post(Nodes[i], PG, info)
				break
			end
		end
	end
end


-- Platform Specific Functions
--
local system_name = sys.get_sys_info().system_name
if system_name == "Android" then

	local pTable, mTable, rTable, TouchCnt, GuiTouchIdx = {}, {}, {}, 0, false
	local ConsumeInput, UnpackInput = AcInput.Consume, AcInput.Unpack

	function GuiDoFeedback(with_hitsound)
		local current_time = socket_gettime()

		-- Do Haptic Feedback
		--
		if HapticFeedbackEnabled and (current_time-LastHapticTime)>0.037 then
			LastHapticTime = current_time
			DoHapticFeedback()
		end

		-- Play HitSound
		--
		if HitSoundEnabled and with_hitsound then
			PlayUnit(HitSoundUnits[HsWhich], false)
			HsWhich = (HsWhich==6) and 1 or (HsWhich+1)
			StopUnit(HitSoundUnits[HsWhich], true)
		end
	end

	-- Input Processor
	--
	local function ProcessInput()
		if WindowActive and (not WithinInterlude) then

			-- Judge & Do Feedback
			--
			if ContextTime then
				local hit, early, late, s = JudgeArf(TouchTable)
				Hit, Early, Late = Hit+hit, Early+early, Late+late

				if (hit+early+late) > 0 then
					local current_time = socket_gettime()

					-- Do Haptic Feedback
					--
					if HapticFeedbackEnabled and (current_time-LastHapticTime)>0.037 then
						LastHapticTime = current_time
						DoHapticFeedback()
					end

					-- Play HitSound
					--
					if HitSoundEnabled and AudioLatency<51 then
						PlayUnit(HitSoundUnits[HsWhich], false)
						HsWhich = (HsWhich==6) and 1 or (HsWhich+1)
						StopUnit(HitSoundUnits[HsWhich], true)
					end
				end

				-- Send message to FumenScript if needed
				--
				if s and CurrentFumenScript then
					msg_post(CurrentFumenScript, AR_SHJ)
				end
			end

			-- Do GUI Stuff
			--
			if GuiTouchIdx then
				for i = NodeMaxIndex, 1, -1 do
					if Nodes[i] then
						local guiTouchVec = TouchTable[GuiTouchIdx]
						GuiTable.x, GuiTable.y, GuiTable.phase = guiTouchVec.x, guiTouchVec.y, guiTouchVec.z
						NodeMaxIndex, GuiTable.nodeProgress = i, i
						msg_post(Nodes[i], PG, GuiTable)
						break
					end
				end
			end
		end
	end

	-- Input Consumer
	--
	function fixed_update()
		local pCnt, rCnt, guiPressed, isCancelled = ConsumeInput(pTable, mTable, rTable)

		-- I. Pressed Dispatching
		--
		if pCnt > 0 then
			for i = 1, pCnt do
				local x, y, idx = UnpackInput( pTable[i] )
				local touchVec = TouchTable[idx]
				touchVec.x = 900 + (x - CenterX) * PosDnm
				touchVec.y = 540 + (CenterY - y) * PosDnm   -- Android uses (0,0)-at-upper-left coordinate system
				touchVec.z = 1
			end

			if  guiPressed  then  GuiTouchIdx = guiPressed  end
			ProcessInput()
		end

		-- II. OnScreen Dispatching
		--
		TouchCnt = TouchCnt + pCnt
		if TouchCnt > 0 then
			for i = 1, 32 do
				local touchVec = TouchTable[i]
				if  touchVec.z == 1  then  touchVec.z = 2  end

				local x = mTable[i]
				if x then
					local y ; x, y = UnpackInput(x)
					touchVec.x = 900 + (x - CenterX) * PosDnm
					touchVec.y = 540 + (CenterY - y) * PosDnm
					mTable[i] = nil   -- Reuse `mTable`
				end
			end
				ProcessInput()
		end

		-- III. Released Dispatching
		--
		if isCancelled then
			for i = 1, 32 do
				local touchVec = TouchTable[i]
				if  touchVec.z > 0  then  touchVec.z = 3  end
			end

			ProcessInput()
			for  i = 1, 32  do  TouchTable[i].z = 0  end
			GuiTouchIdx = false
			TouchCnt = 0

		elseif rCnt > 0 then
			local guiReleased = false

			for i = 1, rCnt do
				local rIdx = rTable[i]
				if  rIdx == GuiTouchIdx  then  guiReleased = true  end
				TouchTable[rIdx].z = 3
			end

			ProcessInput()
			for  i = 1, rCnt  do  TouchTable[ rTable[i] ].z = 0  end
			if  guiReleased  then  GuiTouchIdx = false  end
			TouchCnt = TouchCnt - rCnt
		end
	end
elseif system_name == "iPhone OS" then

	function GuiDoFeedback(with_hitsound)
		local current_time = socket_gettime()

		-- Do Haptic Feedback
		--
		if HapticFeedbackEnabled and (current_time-LastHapticTime)>0.037 then
			LastHapticTime = current_time
			DoHapticFeedback()
		end

		-- Play HitSound
		--
		if HitSoundEnabled and with_hitsound then
			PlayUnit(HitSoundUnits[HsWhich], false)
			HsWhich = (HsWhich==6) and 1 or (HsWhich+1)
			StopUnit(HitSoundUnits[HsWhich], true)
		end
	end

	function on_input(self, action_id, action)
		if WindowActive and (not WithinInterlude) and action_id==TOUCH_MULTI then

			-- Motion Update
			--
			for i = 1, 10 do
				TouchTable[i].z = 0
			end

			local TouchMsgs = action.touch
			for i = 1, #TouchMsgs do
				local touchmsg = TouchMsgs[i]
				local touchvec = TouchTable[touchmsg.id + 1]
				touchvec.x = 900 + (touchmsg.screen_x - CenterX) * PosDnm
				touchvec.y = 540 + (touchmsg.screen_y - CenterY) * PosDnm
				local phase = touchmsg.pressed	and 1 or 2
					  phase = touchmsg.released	and 3 or phase
				touchvec.z = phase
			end

			-- Judge & Do Feedback
			--
			if ContextTime then
				local hit, early, late, s = JudgeArf(TouchTable)
				Hit, Early, Late = Hit+hit, Early+early, Late+late

				if (hit+early+late) > 0 then
					local current_time = socket_gettime()

					-- Do Haptic Feedback
					--
					if HapticFeedbackEnabled and (current_time-LastHapticTime)>0.037 then
						LastHapticTime = current_time
						DoHapticFeedback()
					end

					-- Play HitSound
					--
					if HitSoundEnabled and AudioLatency<51 then
						PlayUnit(HitSoundUnits[HsWhich], false)
						HsWhich = (HsWhich==6) and 1 or (HsWhich+1)
						StopUnit(HitSoundUnits[HsWhich], true)
					end
				end

				-- Send message to FumenScript if needed
				--
				if s and CurrentFumenScript then
					msg_post(CurrentFumenScript, AR_SHJ)
				end
			end

			-- Do GUI Stuff
			--
			local GuiTouch = TouchTable[1]
			if GuiTouch.z > 0 then
				for i = NodeMaxIndex, 1, -1 do
					if Nodes[i] then
						NodeMaxIndex, GuiTable.nodeProgress = i, i
						GuiTable.x, GuiTable.y, GuiTable.phase = GuiTouch.x, GuiTouch.y, GuiTouch.z
						msg_post(Nodes[i], PG, GuiTable)
						break
					end
				end
			end
		end
			return true
	end
else
	function GuiDoFeedback(with_hitsound)
		-- Play HitSound
		--
		if HitSoundEnabled and with_hitsound then
			PlayUnit(HitSoundUnits[HsWhich], false)
			HsWhich = (HsWhich==6) and 1 or (HsWhich+1)
			StopUnit(HitSoundUnits[HsWhich], true)
		end
	end

	function on_input(self, action_id, action)
		if WindowActive and (not WithinInterlude) and action_id==TOUCH then

			-- Cursor Update
			--
			local x, y, phase
			local cursor = TouchTable[1]
			x = 900 + (action.screen_x - CenterX) * PosDnm
			y = 540 + (action.screen_y - CenterY) * PosDnm
			phase = action.pressed	and 1 or 2
			phase = action.released	and 3 or phase
			cursor.x, cursor.y, cursor.z = x, y, phase

			-- Judge & Do Feedback
			--
			if ContextTime then
				local hit, early, late, s = JudgeArf(TouchTable)
				Hit, Early, Late = Hit+hit, Early+early, Late+late

				-- Play HitSound
				--
				if (hit+early+late)>0 and HitSoundEnabled and AudioLatency<51 then
					PlayUnit(HitSoundUnits[HsWhich], false)
					HsWhich = (HsWhich==6) and 1 or (HsWhich+1)
					StopUnit(HitSoundUnits[HsWhich], true)
				end

				-- Send message to FumenScript if needed
				--
				if s and CurrentFumenScript then
					msg_post(CurrentFumenScript, AR_SHJ)
				end
			end

			-- Do GUI Stuff
			--
			for i = NodeMaxIndex, 1, -1 do
				if Nodes[i] then
					NodeMaxIndex, GuiTable.nodeProgress = i, i
					GuiTable.x, GuiTable.y, GuiTable.phase = x, y, phase
					msg_post(Nodes[i], PG, GuiTable)
					break
				end
			end
		end
			return true
	end
end