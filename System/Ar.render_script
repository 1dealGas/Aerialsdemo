-- Render Script for Aerials
-- Copyright 2024- 1dealGas, under the Apache 2.0 License.
--
local window_width, window_height = 0, 0
local clear_buffers = {
	[graphics.BUFFER_TYPE_COLOR0_BIT] = vmath.vector4(),
	[graphics.BUFFER_TYPE_STENCIL_BIT] = 0,
	[graphics.BUFFER_TYPE_DEPTH_BIT] = 1
}

local hint_frustum, hint_proj = {}, nil
local screen_frustum, screen_proj = {}, nil
local fixedfit_frustum, fixedfit_proj = {}, nil

local hint_render_target
local pd_under_hint, pd_hint, pd_render_hint
local pd_gui, pd_tile, pd_text, pd_particle

-- Funcs & Constants
--
local render_draw = render.draw
local render_clear = render.clear
local render_enable_state = render.enable_state
local render_disable_state = render.disable_state
local render_enable_texture = render.enable_texture
local render_disable_texture = render.disable_texture
local render_set_render_target = render.set_render_target
local render_set_stencil_mask = render.set_stencil_mask
local render_set_blend_func = render.set_blend_func
local render_set_projection = render.set_projection
local render_set_viewport = render.set_viewport
local render_draw_debug3d = render.draw_debug3d

local CLEAR_COLOR	 = hash "clear_color"
local WINDOW_RESIZED = hash "window_resized"
local BLEND_FACTOR_SRC_ALPHA = graphics.BLEND_FACTOR_SRC_ALPHA
local BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = graphics.BLEND_FACTOR_ONE_MINUS_SRC_ALPHA
local STATE_STENCIL_TEST = graphics.STATE_STENCIL_TEST
local STATE_BLEND = graphics.STATE_BLEND

local function resize(w, h)
	window_width, window_height = w, h
	local config_width, config_height = render.get_width(), render.get_height()
	local wr_left, hr_bottom = w / config_width, h / config_height

	local fixedfit_width, fixedfit_height
	if wr_left < hr_bottom then
		fixedfit_width = w / wr_left
		fixedfit_height = h / wr_left
	else
		fixedfit_width = w / hr_bottom
		fixedfit_height = h / hr_bottom
	end
	wr_left = (config_width - fixedfit_width) / 2
	hr_bottom = (config_height - fixedfit_height) / 2

	fixedfit_proj = vmath.matrix4_orthographic(
		wr_left, wr_left + fixedfit_width, hr_bottom, hr_bottom + fixedfit_height, -1, 1
	)
	fixedfit_frustum.frustum = fixedfit_proj

	screen_proj = vmath.matrix4_orthographic(0, w, 0, h, -1, 1)
	screen_frustum.frustum = screen_proj
end


-- Lifecycle Funcs
--
function init(self)
	-- Load Predicates
	--
	local pd = render.predicate
	pd_gui, pd_tile, pd_text, pd_particle = pd{"gui"}, pd{"tile"}, pd{"text"}, pd{"particle"}
	pd_under_hint, pd_hint, pd_render_hint = pd{"under_hint"}, pd{"hint"}, pd{"render_hint"}
	resize( render.get_window_width(), render.get_window_height() )

	-- Load Hint Render Target
	--
	hint_proj = vmath.matrix4_orthographic(0, 1800, 0, 1080, -1, 1)
	hint_render_target = render.render_target("hint", {
		[graphics.BUFFER_TYPE_COLOR0_BIT] = {
			format = graphics.TEXTURE_FORMAT_RGB,
			width = 1800, height = 1080
		}
	})
	hint_frustum.frustum = hint_proj
end

function update(self, dt)
	render_enable_state(STATE_BLEND)
	render_set_blend_func(BLEND_FACTOR_SRC_ALPHA, BLEND_FACTOR_ONE_MINUS_SRC_ALPHA)
	render_set_stencil_mask(0xff)

	-- Hint
	--
	render_set_render_target(hint_render_target)
	render_set_viewport(0, 0, 1800, 1080)
	render_set_projection(hint_proj)
	render_clear(clear_buffers)
	render_draw(pd_hint, hint_frustum)

	-- World Stuff
	--
	render_set_render_target(nil)
	render_set_viewport(0, 0, window_width, window_height)
	render_set_projection(fixedfit_proj)
	render_clear(clear_buffers)

	do
		render_draw(pd_under_hint, fixedfit_frustum)
		render_enable_texture(0, hint_render_target)
		render_draw(pd_render_hint, fixedfit_frustum)
		render_disable_texture(0)
	end

	render_draw(pd_tile, fixedfit_frustum)
	render_draw(pd_particle, fixedfit_frustum)

	-- Debug & GUI
	--
	render_set_projection(screen_proj)
	render_draw_debug3d()

	render_enable_state(STATE_STENCIL_TEST)
	render_draw(pd_gui, screen_frustum)
	render_draw(pd_text, screen_frustum)
	render_disable_state(STATE_STENCIL_TEST)
	render_disable_state(STATE_BLEND)
end

function on_message(self, message_id, message, sender)
	if message_id == CLEAR_COLOR then
		clear_buffers[graphics.BUFFER_TYPE_COLOR0_BIT] = message.color or vmath.vector4()
	elseif message_id == WINDOW_RESIZED then
		resize(message.width, message.height)
	end
end


require("Pragma/[Init]")